/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viz.pdf;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.DocAttributeSet;
import javax.print.attribute.HashDocAttributeSet;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.MediaSizeName;
import javax.swing.JFileChooser;
import oracle.jrockit.jfr.events.ContentTypeImpl;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import org.apache.pdfbox.rendering.PDFRenderer;
import wf.common.SystemProperties;

/**
 *
 * @author swtf
 */
public class MultiPagePrintPDF extends javax.swing.JFrame {

    /**
     * Creates new form MultiPagePrintPDF
     */
    public MultiPagePrintPDF() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField_pdf = new javax.swing.JTextField();
        jButton_pdf = new javax.swing.JButton();
        jLabel_pdf = new javax.swing.JLabel();
        jLabel_row = new javax.swing.JLabel();
        jSpinner_row = new javax.swing.JSpinner();
        jLabel_column = new javax.swing.JLabel();
        jSpinner_column = new javax.swing.JSpinner();
        jLabel_pageRange = new javax.swing.JLabel();
        jTextField_pageRange = new javax.swing.JTextField();
        jToggleButton_generateImageFile = new javax.swing.JToggleButton();
        jButton_print = new javax.swing.JButton();
        jLabel_status = new javax.swing.JLabel();
        jToggleButton_orientation = new javax.swing.JToggleButton();
        jPanel_padding = new javax.swing.JPanel();
        jLabel_padding_top = new javax.swing.JLabel();
        jSpinner_padding_top = new javax.swing.JSpinner();
        jLabel_padding_bottom = new javax.swing.JLabel();
        jSpinner_padding_bottom = new javax.swing.JSpinner();
        jLabel_padding_left = new javax.swing.JLabel();
        jSpinner_padding_left = new javax.swing.JSpinner();
        jLabel_padding_right = new javax.swing.JLabel();
        jSpinner_padding_right = new javax.swing.JSpinner();
        jPanel_margin = new javax.swing.JPanel();
        jLabel_margin_top = new javax.swing.JLabel();
        jSpinner_margin_top = new javax.swing.JSpinner();
        jLabel_margin_bottom = new javax.swing.JLabel();
        jSpinner_margin_bottom = new javax.swing.JSpinner();
        jLabel_margin_left = new javax.swing.JLabel();
        jSpinner_margin_left = new javax.swing.JSpinner();
        jLabel_margin_right = new javax.swing.JLabel();
        jSpinner_margin_right = new javax.swing.JSpinner();
        jPanel_page_padding = new javax.swing.JPanel();
        jLabel_page_padding_top = new javax.swing.JLabel();
        jSpinner_page_padding_top = new javax.swing.JSpinner();
        jLabel_page_padding_bottom = new javax.swing.JLabel();
        jSpinner_page_padding_bottom = new javax.swing.JSpinner();
        jLabel_page_padding_left = new javax.swing.JLabel();
        jSpinner_page_padding_left = new javax.swing.JSpinner();
        jLabel_page_padding_right = new javax.swing.JLabel();
        jSpinner_page_padding_right = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PDF多页打印工具");
        setMinimumSize(new java.awt.Dimension(500, 400));
        setSize(new java.awt.Dimension(500, 400));

        jTextField_pdf.setText("C:\\Users\\swtf\\桌面\\New Document.pdf");
        jTextField_pdf.setToolTipText("pdf文件路径");

        jButton_pdf.setText("浏览");
        jButton_pdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_pdfActionPerformed(evt);
            }
        });

        jLabel_pdf.setText("PDF文件路径:");

        jLabel_row.setText("行:");

        jSpinner_row.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jLabel_column.setText("列:");

        jSpinner_column.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jLabel_pageRange.setText("页码范围:");

        jTextField_pageRange.setText("1");

        jToggleButton_generateImageFile.setSelected(true);
        jToggleButton_generateImageFile.setText("生成图片文件");
        jToggleButton_generateImageFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_generateImageFileActionPerformed(evt);
            }
        });

        jButton_print.setText("打印");
        jButton_print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_printActionPerformed(evt);
            }
        });

        jToggleButton_orientation.setSelected(true);
        jToggleButton_orientation.setLabel("横向");
        jToggleButton_orientation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_orientationActionPerformed(evt);
            }
        });

        jPanel_padding.setBorder(javax.swing.BorderFactory.createTitledBorder("单页页边距(cm)"));

        jLabel_padding_top.setText("上");

        jSpinner_padding_top.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));

        jLabel_padding_bottom.setText("下");

        jSpinner_padding_bottom.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));

        jLabel_padding_left.setText("左");

        jSpinner_padding_left.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));

        jLabel_padding_right.setText("右");

        jSpinner_padding_right.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));

        javax.swing.GroupLayout jPanel_paddingLayout = new javax.swing.GroupLayout(jPanel_padding);
        jPanel_padding.setLayout(jPanel_paddingLayout);
        jPanel_paddingLayout.setHorizontalGroup(
            jPanel_paddingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_paddingLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel_padding_top)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_padding_top, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jLabel_padding_bottom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_padding_bottom, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jLabel_padding_left)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_padding_left, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jLabel_padding_right)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_padding_right, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel_paddingLayout.setVerticalGroup(
            jPanel_paddingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_paddingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jSpinner_padding_bottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel_padding_bottom))
            .addGroup(jPanel_paddingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jSpinner_padding_top, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel_padding_top))
            .addGroup(jPanel_paddingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jSpinner_padding_right, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel_padding_right)
                .addComponent(jSpinner_padding_left, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel_padding_left))
        );

        jPanel_margin.setBorder(javax.swing.BorderFactory.createTitledBorder("整页页边距(cm)"));

        jLabel_margin_top.setText("上");

        jSpinner_margin_top.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));

        jLabel_margin_bottom.setText("下");

        jSpinner_margin_bottom.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));

        jLabel_margin_left.setText("左");

        jSpinner_margin_left.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));

        jLabel_margin_right.setText("右");

        jSpinner_margin_right.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));

        javax.swing.GroupLayout jPanel_marginLayout = new javax.swing.GroupLayout(jPanel_margin);
        jPanel_margin.setLayout(jPanel_marginLayout);
        jPanel_marginLayout.setHorizontalGroup(
            jPanel_marginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_marginLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel_margin_top)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_margin_top, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jLabel_margin_bottom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_margin_bottom, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel_margin_left)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_margin_left, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jLabel_margin_right)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_margin_right, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel_marginLayout.setVerticalGroup(
            jPanel_marginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_marginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jSpinner_margin_right, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel_margin_right)
                .addComponent(jSpinner_margin_left, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel_margin_left)
                .addComponent(jSpinner_margin_top, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel_margin_top)
                .addComponent(jSpinner_margin_bottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel_margin_bottom))
        );

        jPanel_page_padding.setBorder(javax.swing.BorderFactory.createTitledBorder("单页裁剪边距(cm)"));

        jLabel_page_padding_top.setText("上");

        jSpinner_page_padding_top.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));

        jLabel_page_padding_bottom.setText("下");

        jSpinner_page_padding_bottom.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));

        jLabel_page_padding_left.setText("左");

        jSpinner_page_padding_left.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));

        jLabel_page_padding_right.setText("右");

        jSpinner_page_padding_right.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 0.01d));

        javax.swing.GroupLayout jPanel_page_paddingLayout = new javax.swing.GroupLayout(jPanel_page_padding);
        jPanel_page_padding.setLayout(jPanel_page_paddingLayout);
        jPanel_page_paddingLayout.setHorizontalGroup(
            jPanel_page_paddingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_page_paddingLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel_page_padding_top)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_page_padding_top, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jLabel_page_padding_bottom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_page_padding_bottom, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jLabel_page_padding_left)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_page_padding_left, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jLabel_page_padding_right)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner_page_padding_right, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel_page_paddingLayout.setVerticalGroup(
            jPanel_page_paddingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_page_paddingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jSpinner_page_padding_bottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel_page_padding_bottom))
            .addGroup(jPanel_page_paddingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jSpinner_page_padding_top, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel_page_padding_top))
            .addGroup(jPanel_page_paddingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jSpinner_page_padding_right, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel_page_padding_right)
                .addComponent(jSpinner_page_padding_left, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel_page_padding_left))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel_padding, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_row)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner_row))
                            .addComponent(jLabel_pdf))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField_pdf)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_pdf))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_column)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner_column, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                                .addComponent(jToggleButton_generateImageFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jToggleButton_orientation))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_pageRange)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_pageRange))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_print))
                    .addComponent(jPanel_margin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel_page_padding, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_pdf)
                    .addComponent(jTextField_pdf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_pdf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_row)
                    .addComponent(jSpinner_row, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_column)
                    .addComponent(jSpinner_column, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton_generateImageFile)
                    .addComponent(jToggleButton_orientation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_pageRange)
                    .addComponent(jTextField_pageRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_padding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_margin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_page_padding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_print)
                    .addComponent(jLabel_status))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_pdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_pdfActionPerformed
        JFileChooser fileChooser = new JFileChooser(SystemProperties.USER_DIR);
        int state = fileChooser.showOpenDialog(this);
        if (state == fileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            jTextField_pdf.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton_pdfActionPerformed

    private void jButton_printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_printActionPerformed
        String pdfPath = jTextField_pdf.getText().toString();
        int row = (int) jSpinner_row.getValue();
        int column = (int) jSpinner_column.getValue();
        File file = new File(pdfPath);
        if (pdfPath.length() == 0 || !file.isFile() || !pdfPath.toLowerCase().endsWith(".pdf") || row <= 0 || column <= 0) {
            return;
        }
//生成文件
//        if (isGenerateImageFile) {
//            if (pdd == null) {
//                oPath = file.getParent();
//                pdd = new PDDocument();
//            }
//        }
        String pageRange = jTextField_pageRange.getText().toString();
        List<Integer> pageIndexes = new ArrayList<>();
        if (pageRange.length() > 0) {
            if (pageRange.contains(",")) {
                String[] pages = pageRange.split(",");
                int pageSize = pages.length;
                for (int i = 0; i < pageSize; i++) {
                    String pagesI = pages[i];
                    if (pagesI.contains("-")) {
                        if (pagesI.indexOf("-") == pagesI.lastIndexOf("-")) {
                            String[] range = pagesI.split("-");
                            int start = Integer.parseInt(range[0]);
                            int end = Integer.parseInt(range[1]);
                            int rangeSize = end - start + 1;
                            if (rangeSize > 0) {
                                for (int j = 0; j < rangeSize; j++) {
                                    pageIndexes.add(start + j - 1);
                                }
                            } else {
                                pageRangeFormatError(0);
                            }
                        } else {
                            pageRangeFormatError(1);
                            return;
                        }
                    } else if (isNumeric(pagesI)) {
                        pageIndexes.add(Integer.parseInt(pagesI) - 1);
                    } else {
                        pageRangeFormatError(2);
                        return;
                    }
                }
            } else if (pageRange.contains("-")) {
                if (pageRange.indexOf("-") == pageRange.lastIndexOf("-")) {
                    String[] range = pageRange.split("-");
                    int start = Integer.parseInt(range[0]);
                    int end = Integer.parseInt(range[1]);
                    int rangeSize = end - start + 1;
                    if (rangeSize > 0) {
                        for (int j = 0; j < rangeSize; j++) {
                            pageIndexes.add(start + j - 1);
                        }
                    } else {
                        pageRangeFormatError(4);
                    }
                } else {
                    pageRangeFormatError(3);
                    return;
                }
            } else if (isNumeric(pageRange)) {
                pageIndexes.add(Integer.parseInt(pageRange) - 1);
            } else {
                pageRangeFormatError(5);
                return;
            }
        }
        jLabel_status.setText("正在准备打印...");
        jButton_print.setEnabled(false);
        DocAttributeSet das = new HashDocAttributeSet();
        PrintRequestAttributeSet pras = new HashPrintRequestAttributeSet();
        pras.add(MediaSizeName.ISO_A4);
        pras.add(javax.print.attribute.standard.OrientationRequested.LANDSCAPE);
        DocFlavor flavor = DocFlavor.INPUT_STREAM.AUTOSENSE;
        PrintService printService[] = PrintServiceLookup.lookupPrintServices(flavor, pras);
        PrintService defaultService = PrintServiceLookup.lookupDefaultPrintService();
//            PrintService service = ServiceUI.printDialog(null, 200, 200, printService
//                                                        , defaultService, flavor, pras);
        if (defaultService != null) {
            try {
                ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();
                singleThreadExecutor.execute(new Runnable() {
                    @Override
                    public void run() {
                        pdf2multiImage(file.getAbsolutePath(), jToggleButton_generateImageFile.isSelected() ? file.getParent() : null, row, column, pageIndexes, defaultService);
                    }

                });

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton_printActionPerformed

    private boolean isNumeric(String str) {
        Pattern pattern = Pattern.compile("[0-9]*");
        Matcher isNum = pattern.matcher(str);
        if (!isNum.matches()) {
            return false;
        }
        return true;
    }

    private void pageRangeFormatError(int code) {
        jLabel_status.setText("页面范围格式错误!!!<" + code + ">");
    }

    private boolean isGenerateImageFile = true;//生成图片/打印

    private void jToggleButton_generateImageFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_generateImageFileActionPerformed
        isGenerateImageFile = jToggleButton_generateImageFile.isSelected();
        jToggleButton_generateImageFile.setText(isGenerateImageFile ? "生成图片文件" : "直接打印");
    }//GEN-LAST:event_jToggleButton_generateImageFileActionPerformed

    private boolean isH = true;//横向/纵向

    private void jToggleButton_orientationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_orientationActionPerformed
        isH = jToggleButton_orientation.isSelected();
        jToggleButton_orientation.setText(isH ? "横向" : "纵向");
    }//GEN-LAST:event_jToggleButton_orientationActionPerformed

    private boolean isLastPage = false;

    /**
     * 将pdf中的maxPage页，转换成一张图片
     *
     * @param pdfFile pdf的路径
     * @param outpath 输出的图片的路径[包括名称]
     * @param row 行
     * @param column 列
     */
    private void pdf2multiImage(String pdfFile, String outpath, int row, int column, List<Integer> pageIndexes, PrintService ps) {
        try {
            if (pageIndexes == null) {
                pageIndexes = new ArrayList<>();
            }
            InputStream is = new FileInputStream(pdfFile);
            PDDocument pdf = PDDocument.load(new File(pdfFile));
            PDFRenderer renderer = new PDFRenderer(pdf);
            List<BufferedImage> piclist = new ArrayList<>();
            int actSize = pdf.getNumberOfPages(); // pdf中实际的页数
            int pageIndexSize = pageIndexes.size();
//            System.out.println(pageIndexSize);
            boolean isPageIndexSizeZero = pageIndexSize == 0;
            int useSize = isPageIndexSizeZero ? actSize : pageIndexSize;
//            System.out.println(useSize);
            int pageCount = 1;
            ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();
            for (int i = 0; i < useSize; i++) {
                BufferedImage renderImage = renderer.renderImage(isPageIndexSizeZero ? i : pageIndexes.get(i));
                piclist.add(renderImage);
                if (((i + 1) % (row * column) == 0 && row * column < useSize) || i == useSize - 1) {
                    String pStr = String.format("打印第%d页\n", pageCount);
                    isLastPage = false;
                    if (i == useSize - 1) {
                        if (column > 1 && useSize % (row * column) != 0) {
                            BufferedImage bi = new BufferedImage(renderImage.getWidth(), renderImage.getHeight(), renderImage.getType());
                            Graphics2D dg = (Graphics2D) bi.createGraphics();
                            dg.setColor(Color.WHITE);//设置笔刷白色
                            dg.fillRect(0, 0, renderImage.getWidth(), renderImage.getHeight());//填充整个屏幕
                            for (int j = 0; j < row * column - useSize % (row * column); j++) {
                                piclist.add(bi);
                            }
                        }
                        pStr = "打印最后一页\n";
                        isLastPage = true;
                    }
//                    System.out.println(piclist.size());
                    System.out.println(pStr);
                    jLabel_status.setText(pStr);
                    singleThreadExecutor.execute(new Runnable() {
                        @Override
                        public void run() {
                            yPic(piclist, outpath, row, column, ps);
                            piclist.clear();
                        }

                    });
                    pageCount++;
                }
            }

            is.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
//生成文件
//    private static String oPath = "";
//    private static PDDocument pdd = null;

    /**
     * 将宽度相同的图片，竖向追加在一起 ##注意：宽度必须相同
     *
     * @param piclist 文件流数组
     * @param outPath 输出路径
     */
    public void yPic(List<BufferedImage> piclist, String outPath, int row, int column, PrintService ps) {// 纵向处理图片  
        if (piclist == null || piclist.size() <= 0) {
            System.out.println("图片数组为空!");
            return;
        }
        try {
            int height = 0, // 总高度  
                    width = 0, // 总宽度  
                    _height = 0, // 临时的高度 , 或保存偏移高度  
                    _width = 0, // 临时的宽度 , 或保存偏移宽度  
                    __height = 0, // 临时的高度，主要保存每个高度  
                    __width = 0, // 临时的宽度，主要保存每个宽度  
                    picNum = piclist.size();// 图片的数量  
            File fileImg = null; // 保存读取出的图片  
            int[] heightArray = new int[picNum]; // 保存每个文件的高度  
            int[] widthArray = new int[picNum]; // 保存每个文件的宽度  
            BufferedImage buffer = null; // 保存图片流  
            List<int[]> imgRGB = new ArrayList<int[]>(); // 保存所有的图片的RGB  
            int[] _imgRGB; // 保存一张图片中的RGB数据  
            int padding_top = cmToPx((double) jSpinner_padding_top.getValue());
            int padding_bottom = cmToPx((double) jSpinner_padding_bottom.getValue());
            int padding_left = cmToPx((double) jSpinner_padding_left.getValue());
            int padding_right = cmToPx((double) jSpinner_padding_right.getValue());
            int page_padding_top = cmToPx((double) jSpinner_page_padding_top.getValue());
            int page_padding_bottom = cmToPx((double) jSpinner_page_padding_bottom.getValue());
            int page_padding_left = cmToPx((double) jSpinner_page_padding_left.getValue());
            int page_padding_right = cmToPx((double) jSpinner_page_padding_right.getValue());
            int margin_top = cmToPx((double) jSpinner_margin_top.getValue());
            int margin_bottom = cmToPx((double) jSpinner_margin_bottom.getValue());
            int margin_left = cmToPx((double) jSpinner_margin_left.getValue());
            int margin_right = cmToPx((double) jSpinner_margin_right.getValue());
//            System.out.println(padding_top);
//            System.out.println(padding_bottom);
//            System.out.println(padding_left);
//            System.out.println(padding_right);
            for (int i = 0; i < picNum; i++) {
                buffer = piclist.get(i);
                heightArray[i] = _height = buffer.getHeight() - (page_padding_top + page_padding_bottom);// 图片高度  
//            if (i == 0) {  
//                width = buffer.getWidth();// 图片宽度  
//            }  
                widthArray[i] = _width = buffer.getWidth() - (page_padding_left + page_padding_right);// 图片宽度 
                if (i < column) {
                    width += _width; // 获取总宽度  
                }
                if ((i + 1) % column == 1 || column == 1) {
                    height += _height; // 获取总高度  
                }
                _imgRGB = new int[_width * _height];// 从图片中读取RGB  
                _imgRGB = buffer.getRGB(page_padding_left, page_padding_top, _width, _height, _imgRGB, 0, _width);
                imgRGB.add(_imgRGB);
            }
            _height = 0; // 设置偏移高度为0 
            _width = 0;
//        System.out.printf("widthA:%d heightA:%d\n",width,height);
            // 生成新图片  
            BufferedImage imageResult = new BufferedImage(width + (padding_left + padding_right) * column + margin_left + margin_right, height + (padding_top + padding_bottom) * row + margin_top + margin_bottom, BufferedImage.TYPE_INT_RGB);
            Graphics2D dg = (Graphics2D) imageResult.createGraphics();
            dg.setColor(Color.WHITE);//设置笔刷白色
            dg.fillRect(0, 0, imageResult.getWidth(), imageResult.getHeight());//填充整个屏幕
//        System.out.println(picNum);
            int wi = 1;
            int hi = 1;
            for (int i = 0; i < picNum; i++) {
                __width = widthArray[i];
                __height = heightArray[i];
                if ((i + 1) > column && (i + 1) % column == 1) {
                    _height += __height; // 计算偏移高度  
                    _width = 0;
                    hi++;
                    wi = 1;
                }
                if ((i + 1) % column != 1 && column > 1) {
                    _width += __width; // 计算偏移宽度  
                    wi++;
                }
//                System.out.printf("_width:%d _height:%d\n", _width, _height);
//                System.out.printf("__width:%d __height:%d\n", __width, __height);
//                System.out.println("imgRGB:" + imgRGB.get(i).length);
//System.out.println(i+"---------"+ wi + " " + hi);
//                System.out.println(_width + padding_left * wi + padding_right * (wi - 1));
//                System.out.println(_height + padding_top * hi + padding_bottom * (hi - 1));
                imageResult.setRGB(_width + padding_left * wi + padding_right * (wi - 1) + margin_left, _height + padding_top * hi + padding_bottom * (hi - 1) + margin_top, __width, __height, imgRGB.get(i), 0, __width); // 写入流中  
            }
            int lineCount = row - 1;
            dg.setColor(Color.red);
            int w = (__width + padding_left + padding_right);
            int h = (__height + padding_top + padding_bottom);
            for (int i = 1; i <= lineCount; i++) {
                int mb = (i==lineCount?margin_bottom:0);
                dg.drawLine(margin_left, h * i + margin_top, w * column + margin_left, h * i + margin_top);
            }
            lineCount = column - 1;
            for (int i = 1; i <= lineCount; i++) {
                int mr = (i==lineCount?margin_right:0);
                dg.drawLine(w * i + margin_left, margin_top, w * i + margin_left, h * row + margin_top);
            }
//            PDPageContentStream content = null;//生成文件
            if (outPath != null) {
                File outFile = new File(outPath, System.currentTimeMillis() + ".jpg");
                ImageIO.write(imageResult, "jpg", outFile);// 写图片  
//生成文件
//                PDPage pdp = new PDPage();
//                pdd.addPage(pdp);
//                PDImageXObject ximage = null;
//                ByteArrayOutputStream os = new ByteArrayOutputStream();
//                ImageIO.write(imageResult, "jpg", os);
//                InputStream is = new ByteArrayInputStream(os.toByteArray());
//                ximage = JPEGFactory.createFromStream(pdd, is);
//                content = new PDPageContentStream(pdd, pdp);
//                content.drawImage(ximage, 0, 0, __width, __height);
//                content.close();
            } else {
                ByteArrayOutputStream os = new ByteArrayOutputStream();
                ImageIO.write(imageResult, "jpg", os);
                InputStream is = new ByteArrayInputStream(os.toByteArray());
                DocAttributeSet das = new HashDocAttributeSet();
                PrintRequestAttributeSet pras = new HashPrintRequestAttributeSet();
                pras.add(MediaSizeName.ISO_A4);
                pras.add(isH ? javax.print.attribute.standard.OrientationRequested.LANDSCAPE : javax.print.attribute.standard.OrientationRequested.PORTRAIT);
                DocFlavor flavor = DocFlavor.INPUT_STREAM.AUTOSENSE;
                Doc doc = new SimpleDoc(is, flavor, das);
                DocPrintJob job = ps.createPrintJob();
                System.out.println(ps.getName());
                job.print(doc, pras);
            }
            if (isLastPage) {
                jLabel_status.setText("打印完成");
                jButton_print.setEnabled(true);
                //生成文件
//                if (isGenerateImageFile) {
//                    try {
//                        pdd.save(new File(oPath, "out.pdf"));
//                    } catch (Exception e) {
//                        jLabel_status.setText(e.getMessage());
//                        e.printStackTrace();
//                    }
//                    oPath = null;
//                    pdd = null;
//                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private int dpi = Toolkit.getDefaultToolkit().getScreenResolution();

    private int cmToPx(double cm) {
        return (int) (cm * dpi / 2.54);
    }

    private double pxToCm(int px) {
        return (double) (px * 2.54 / dpi);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MultiPagePrintPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MultiPagePrintPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MultiPagePrintPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MultiPagePrintPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

//        int screenWidth = Toolkit.getDefaultToolkit().getScreenSize().width;
//        int screenHeight = Toolkit.getDefaultToolkit().getScreenSize().height;
//        int dpi = Toolkit.getDefaultToolkit().getScreenResolution();
//        System.out.println(screenWidth + "x" + screenHeight + " dpi:" + dpi);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MultiPagePrintPDF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_pdf;
    private javax.swing.JButton jButton_print;
    private javax.swing.JLabel jLabel_column;
    private javax.swing.JLabel jLabel_margin_bottom;
    private javax.swing.JLabel jLabel_margin_left;
    private javax.swing.JLabel jLabel_margin_right;
    private javax.swing.JLabel jLabel_margin_top;
    private javax.swing.JLabel jLabel_padding_bottom;
    private javax.swing.JLabel jLabel_padding_left;
    private javax.swing.JLabel jLabel_padding_right;
    private javax.swing.JLabel jLabel_padding_top;
    private javax.swing.JLabel jLabel_pageRange;
    private javax.swing.JLabel jLabel_page_padding_bottom;
    private javax.swing.JLabel jLabel_page_padding_left;
    private javax.swing.JLabel jLabel_page_padding_right;
    private javax.swing.JLabel jLabel_page_padding_top;
    private javax.swing.JLabel jLabel_pdf;
    private javax.swing.JLabel jLabel_row;
    private javax.swing.JLabel jLabel_status;
    private javax.swing.JPanel jPanel_margin;
    private javax.swing.JPanel jPanel_padding;
    private javax.swing.JPanel jPanel_page_padding;
    private javax.swing.JSpinner jSpinner_column;
    private javax.swing.JSpinner jSpinner_margin_bottom;
    private javax.swing.JSpinner jSpinner_margin_left;
    private javax.swing.JSpinner jSpinner_margin_right;
    private javax.swing.JSpinner jSpinner_margin_top;
    private javax.swing.JSpinner jSpinner_padding_bottom;
    private javax.swing.JSpinner jSpinner_padding_left;
    private javax.swing.JSpinner jSpinner_padding_right;
    private javax.swing.JSpinner jSpinner_padding_top;
    private javax.swing.JSpinner jSpinner_page_padding_bottom;
    private javax.swing.JSpinner jSpinner_page_padding_left;
    private javax.swing.JSpinner jSpinner_page_padding_right;
    private javax.swing.JSpinner jSpinner_page_padding_top;
    private javax.swing.JSpinner jSpinner_row;
    private javax.swing.JTextField jTextField_pageRange;
    private javax.swing.JTextField jTextField_pdf;
    private javax.swing.JToggleButton jToggleButton_generateImageFile;
    private javax.swing.JToggleButton jToggleButton_orientation;
    // End of variables declaration//GEN-END:variables
}
